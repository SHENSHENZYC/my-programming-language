statements  : NEWLINE* statement (NEWLINE+ statement)* NEWLINE*

statement   : KEYWORD:RETURN expr?
            : KEYWORD:CONTINUE
            : KEYWORD:BREAK
            : expr

expr        : KEYWORD:VAR IDENTIFIER EQ expr
            : comp-expr ((KEYWORD:AND|KEYWORD:OR) comp-expr)*

comp_expr   : KEYWORD:NOT comp-expr
            : arith-expr ((EE|LT|LTE|GT|GTE) arith-expr)*
       
arith-expr  : term ((PLUS|MINUS) term)*

term        : factor ((MUL|DIV) factor)*

factor      : (PLUS|MINUS) factor
            : power

power       : call (POW factor)*

call        : atom (LPAREN (expr (COMMA expr)*)? RPAREN)?

atom        : INT|FLOAT|IDENTIFIER|STRING
            : LPAREN expr RPAREN
            : if-expr
            : for-expr
            : while-expr
            : func-def
            : list-expr

list-expr   : LSQUARE (expr (COMMA expr)*)? RSQUARE

if-expr     : KEYWORD:IF expr KEYWORD:THEN
              (statement elif-expr|else-expr?)
              | (NEWLINE statements KEYWORD:END|elif-expr|else-expr)

elif-expr   : KEYWORD:ELIF expr KEYWORD:THEN
              (statement elif-expr|else-expr?)
              | (NEWLINE statements KEYWORD:END|elif-expr|else-expr)

else-expr   : KEYWORD:ELSE statement|(NEWLINE statements KEYWORD:END)

for-expr    : KEYWORD:FOR IDENTIFIER EQ expr KEYWORD:TO expr
              (KEYWORD:STEP expr)? KEYWORD:DO 
              statement|(NEWLINE statements KEYWORD:END)

while-expr  : KEYWORD:WHILE expr KEYWORD:DO 
              statement|(NEWLINE statements KEYWORD:END)

func-def    : KEYWORD:FUNC IDENTIFIER?
              LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN
              (ARROW expr)|(NEWLINE statements KEYWORD:END)
